{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","console","log","useState","App","_useState3","_useState4","Object","slicedToArray","id","setId","_useState5","_useState6","messages","setMessages","_useState7","_useState8","conn","sC","setConnection","on","data","state","concat","toConsumableArray","peer","useMemo","Peer","mediaConnection","_useState9","_useState10","peerId","setPeerId","onChange","useCallback","e","target","value","onConnect","preventDefault","connect","send","_useInput","initialState","_useState","_useState2","setValue","useInput","_useInput2","draft","setDraft","onSend","react_default","a","createElement","className","onSubmit","map","i","key","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,uLCKxCC,QAAQC,IAAI,KAAMC,YAqFHC,MAvEf,WAAe,IAAAC,EACSF,mBAAS,MADlBG,EAAAC,OAAAC,EAAA,EAAAD,CAAAF,EAAA,GACLI,EADKH,EAAA,GACDI,EADCJ,EAAA,GAAAK,EAEqBR,mBAAS,IAF9BS,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAELE,EAFKD,EAAA,GAEKE,EAFLF,EAAA,GAAAG,EAIQZ,qBAJRa,EAAAT,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,GAILE,EAJKD,EAAA,GAICE,EAJDF,EAAA,GAKPG,EAAgB,SAACF,GACrBC,EAAGD,GACHA,EAAKG,GAAG,OAAQ,SAASC,GACvBP,EAAY,SAACQ,GAAD,SAAAC,OAAAhB,OAAAiB,EAAA,EAAAjB,CAAee,GAAf,CAAsBD,SAIhCI,EAAOC,kBAAQ,WACnB,IAAMD,EAAO,IAAIE,IAYjB,OAXAF,EAAKL,GAAG,OAAQV,GAChBe,EAAKL,GAAG,OAAQ,SAACQ,GACf3B,QAAQC,IAAI,KAAM0B,KAGpBH,EAAKL,GAAG,aAAc,SAASH,GAC7BhB,QAAQC,IAAI,gBAAiBe,GAC7BE,EAAcF,KAITQ,GACN,IA1BUI,EA4BiB1B,mBAAS,IA5B1B2B,EAAAvB,OAAAC,EAAA,EAAAD,CAAAsB,EAAA,GA4BLE,EA5BKD,EAAA,GA4BGE,EA5BHF,EAAA,GA6BPG,EAAWC,sBAAY,SAACC,GAAD,OAAOH,EAAUG,EAAEC,OAAOC,QAAQ,IACzDC,EAAYJ,sBAAY,SAACC,GAC7BA,EAAEI,iBACF,IAAMtB,EAAOQ,EAAKe,QAAQT,GAC1BZ,EAAcF,GACdA,EAAKG,GAAG,OAAQ,WACdH,EAAKwB,KAAK,SAEX,CAACV,IArCSW,EAZf,SAAkBC,GAAc,IAAAC,EACFzC,mBAASwC,GADPE,EAAAtC,OAAAC,EAAA,EAAAD,CAAAqC,EAAA,GACtBP,EADsBQ,EAAA,GACfC,EADeD,EAAA,GAS9B,MAAO,CAAER,EAPQH,sBAAY,SAACC,GAC5BlC,QAAQC,IAAI,WAAYiC,GAEpBA,GAAKA,EAAEC,QACTU,EAASX,EAAEC,OAAOC,QAEnB,KA2CyBU,CAAS,IAvCxBC,EAAAzC,OAAAC,EAAA,EAAAD,CAAAmC,EAAA,GAuCLO,EAvCKD,EAAA,GAuCEE,EAvCFF,EAAA,GAwCPG,EAASjB,sBAAY,SAACC,GAC1BA,EAAEI,iBACFtB,EAAKwB,KAAKQ,GACVC,EAAS,KACR,CAACD,IAGJ,OADAhD,QAAQC,IAAIW,GAEVuC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,SACG7C,GAEH2C,EAAAC,EAAAC,cAAA,QAAME,SAAUlB,GACdc,EAAAC,EAAAC,cAAA,SAAOrB,SAAUA,EAAUI,MAAON,KAEpCqB,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,UACGzC,EAAS4C,IAAI,SAACpC,EAAMqC,GAAP,OACZN,EAAAC,EAAAC,cAAA,MAAIK,IAAKD,GAAIrC,MAIjB+B,EAAAC,EAAAC,cAAA,QAAME,SAAUL,GACdC,EAAAC,EAAAC,cAAA,SAAOrB,SAAUiB,EAAUb,MAAOY,QCvExBW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOd,EAAAC,EAAAC,cAACa,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.4b5b036d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState, useMemo, useCallback } from 'react';\nimport Peer from 'peerjs'\nimport logo from './logo.svg';\nimport './App.css';\n\nconsole.log('us', useState)\n\nfunction useInput(initialState) {\n  const [ value, setValue ] = useState(initialState)\n  const onChange = useCallback((e) => {\n    console.log('onChange', e)\n\n    if (e && e.target) {\n      setValue(e.target.value)\n    }\n  }, [])\n  return [ value, onChange]\n}\n\nfunction App() {\n  const [ id, setId ] = useState(null)\n  const [ messages, setMessages ] = useState([])\n\n  const [ conn, sC ] = useState()\n  const setConnection = (conn) => {\n    sC(conn)\n    conn.on('data', function(data){\n      setMessages((state) => [...state, data])\n    });\n  }\n\n  const peer = useMemo(() => {\n    const peer = new Peer()\n    peer.on('open', setId)\n    peer.on('call', (mediaConnection) => {\n      console.log('mC', mediaConnection)\n    })\n\n    peer.on('connection', function(conn) {\n      console.log('setConnection', conn)\n      setConnection(conn)\n    });\n\n\n    return peer\n  }, [])\n\n  const [ peerId, setPeerId ] = useState(\"\")\n  const onChange = useCallback((e) => setPeerId(e.target.value), [])\n  const onConnect = useCallback((e) => {\n    e.preventDefault()\n    const conn = peer.connect(peerId)\n    setConnection(conn)\n    conn.on('open', () => {\n      conn.send('hi')\n    })\n  }, [peerId])\n\n  const [ draft, setDraft ] = useInput('')\n  const onSend = useCallback((e) => {\n    e.preventDefault()\n    conn.send(draft)\n    setDraft('')\n  }, [draft])\n\n  console.log(messages)\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>\n          {id}\n        </p>\n        <form onSubmit={onConnect}>\n          <input onChange={onChange} value={peerId} />\n        </form>\n        <h1>Messages</h1>\n        <ul>\n          {messages.map((data, i) => (\n            <li key={i}>{data}</li>\n          ))}\n        </ul>\n\n        <form onSubmit={onSend}>\n          <input onChange={setDraft} value={draft} />\n        </form>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}